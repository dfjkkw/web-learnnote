**运算符

##（1）算术运算符
算术运算符用于连接运算表达式，主要包括加（+）、减（—）、乘（*）、除（/）、取模（%）、自增（++）、自减（- -）等运算符。

算术运算符	                           描述
+	                                 加运算符
-	                                 减运算符
*	                                 乘运算符
/	                                 除运算符
++	                                自增运算符。该运算符有i++(在使用i之后，使i的值加1)和++i（在使用i之前，先使i的值加1）两种
- -	                            自减运算符。该运算符有i--(在使用i之后，使i的值减1)和--i（在使用i之前，先使i的值减1）两种

##（2）算术运算符
比较运算符在逻辑语句中使用，用于判断变量或值是否相等。其运算过程需要首先对操作数进行比较，然后返回一个布尔值true或false。

比较运算符	                                  描述
< 	                                          小于
> 	                                          大于
<=	                                         小于等于
>=	                                         大于等于
= =	                                    等于。只根据表面值进行判断，不涉及数据类型。例如，“27”= =27的值为true
= = =	                                    绝对等于。同时根据表面值和数据类型进行判断。例如，“27”= = =27的值为false
!=	                                        不等于。只根据表面值进行判断，不涉及数据类型。例如，“27”!=27的值为false
!= =	                                    不绝对等于。同时根据表面值和数据类型进行判断。例如，“27”!= =27的值为true

##（3）逻辑运算符
逻辑运算符是根据表达式的值来返回真值或是假值。

逻辑运算符	                                      描述
&&	                      逻辑与，只有当两个操作数a、b的值都为true时，a&&b的值才为true；否则为false
||	                      逻辑或，只有当两个操作数a、b的值都为false时，a||b的值才为false；否则为true
!	                      逻辑非，!true的值为false，而!false的值为true

##算术运算符实例：
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>判断null</title>
	</head>
	<body>
		<script type="text/javascript">
			var exp = null;
			if (exp == null)
			{
			    console.log("null与null比较，如果等于，则输出该句。");
			}
			exp = undefined;
			if (exp == null)
			{
			    console.log("undefined与null比较，如果等于，则输出该句。");
			}
			//同时判断 null 和 undefined 时可使用本法。
			
			var exp2 = null;
			if (!exp2)
			{
			    console.log("null的非为真，则输出该句。");
			}
			exp2 = undefined;
			if (!exp2)
			{
			    console.log("undefined的非为真，则输出该句。");
			}
			exp2 = 0;
			if (!exp2)
			{
			    console.log("0的非为真，则输出该句。");
			}
			exp2 = false;
			if (!exp2)
			{
			    console.log("false的非为真，则输出该句。");
			}
			//同时判断 null、undefined、数字零、false 时可使用本法。
			
			var exp3 = null;
			if (!exp3 && typeof exp3 != "undefined" && exp3 != 0)
			{
			    console.log("方法1：判断为null，则输出该句。");
			}
			if (exp3 === null)
			{
			    console.log("方法2：判断为null，则输出该句。");
			}
			//正确判断null的方法，其中方法2更好
		</script>
	</body>
</html>

##（4）赋值运算符
最基本的赋值运算符是等于号“=”，用于对变量进行赋值。其他运算符可以和赋值运算符“=”联合使用，构成组合赋值运算符。

赋值运算符	                    描述
=	             将右边表达式的值赋给左边的变量。例如，username=“name”
+ =	         将运算符左边的变量加上右边表达式的值赋给左边的变量。例如，a+=b，相当于a=a+b
- =	         将运算符左边的变量减去右边表达式的值赋给左边的变量。例如，a-=b，相当于a=a-b
*=	             将运算符左边的变量乘以右边表达式的值赋给左边的变量。例如，a*=b，相当于a=a*b
/ =	         将运算符左边的变量除以右边表达式的值赋给左边的变量。例如，a/=b，相当于a=a/b
% =	         将运算符左边的变量用右边表达式的值求模，并将结果赋给左边的变量。例如，a%=b，相当于a=a%b

##（5）条件运算符
条件运算符是JavaScript中的一种特殊的三目运算符。

语法格式
	操作数？结果1：结果2
解释：若操作数的值为true，则整个表达式的结果为“结果1”，否则为“结果2”。

赋值运算符	                结合性	                              运算符
最高	                       向左	                           .、 [ ] 、（）

由高到低依次排列	          向右	                          ++、--、-、!、delete、new、typeof、void
                            向左	                             *、/、%
                            向左	                            +、-
                            向左	                            <<、>>、>>>
                            向左	                            <、<=、>、>=、in、instanceof
                            向左	                             = =、!=、= = =、!= = =
                            向左	                              &
                            向左	                             ^
                            向左	                              |
                            向左	                              &&
                            向左	                              ||
                            向右	                              ?:
                            向右	                              =
                            向右	                              *=、/=、%=、+=、-=、<<=、>>=、>>>=、&=、^=、|=
最低	                       向左	                            ，

